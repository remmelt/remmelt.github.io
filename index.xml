<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>snips</title>
    <link>https://www.remmelt.com/</link>
    <description>Recent content on snips</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 06 Dec 2019 23:56:05 +0100</lastBuildDate>
    
	<atom:link href="https://www.remmelt.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Flashing QMK DFU firmware on a Pro Micro</title>
      <link>https://www.remmelt.com/posts/flashing-qmk-dfu-on-pro-micro/</link>
      <pubDate>Fri, 06 Dec 2019 23:56:05 +0100</pubDate>
      
      <guid>https://www.remmelt.com/posts/flashing-qmk-dfu-on-pro-micro/</guid>
      <description>Naming things is hard. As a software engineer, I know this all to well. The times I&#39;ve puzzled, despared, cursed at whoever named some variable, only to have git blame tell me that this particular variable was added by a certain remmelt&amp;hellip;
Either way. In this post I will document the steps I took to flash the qmk-dfu bootloader onto a Pro Micro Arduino clone.
Terms First off, here are some terms I&#39;ll be using.</description>
    </item>
    
    <item>
      <title>Easy headless setup for Raspberry Pi Zero W on OSX</title>
      <link>https://www.remmelt.com/posts/easy-headless-setup-for-raspberry-pi-zero-w-on-osx/</link>
      <pubDate>Fri, 17 Mar 2017 00:00:00 +0100</pubDate>
      
      <guid>https://www.remmelt.com/posts/easy-headless-setup-for-raspberry-pi-zero-w-on-osx/</guid>
      <description>You’ve got your hands on a Rasberry Pi Zero W! Lucky you. This is a great device for IoT, monitoring, you name it. I’m building a connected wake up light.
I will explain how to set up the Raspberry Pi Zero W in headless mode, so without using a screen or keyboard. This will likely also work for any other wifi-equipped Raspberry. You will only need to power the board. Let me know what worked for you!</description>
    </item>
    
    <item>
      <title>Use Consul&#39;s KV store for Dropwizard settings</title>
      <link>https://www.remmelt.com/posts/use-consuls-kv-store-for-dropwizard-settings/</link>
      <pubDate>Tue, 09 Jun 2015 20:18:00 +0000</pubDate>
      
      <guid>https://www.remmelt.com/posts/use-consuls-kv-store-for-dropwizard-settings/</guid>
      <description>I wanted to see how hard it would be to get Dropwizard config from Consul’s key value store. Turns out it is very easy to do!
Make sure you’re using Dropwizard &amp;gt;= 0.8.0, this has the SubstitutingSourceProvider that we’re going to use.
Create a default Dropwizard project with the following configuration line in its config.yml:
someSetting: ${settings/someSetting}
Don’t forget to add it to the xxxConfiguration:
@JsonProperty @NotEmpty private String someSetting; Now in the xxxApplication class, register a new ConsulKVSubstitutor in the initialize method:</description>
    </item>
    
    <item>
      <title>Why does hack time fail?</title>
      <link>https://www.remmelt.com/posts/why-does-hacktime-fail/</link>
      <pubDate>Tue, 02 Jun 2015 11:41:00 +0000</pubDate>
      
      <guid>https://www.remmelt.com/posts/why-does-hacktime-fail/</guid>
      <description>Google are doing it, so it must be a great idea: hack time!
In an innovative and enlightened company, everyone will be on board quickly. Reasoning along the line of, there needs to be some level of slack so people will have space to think and come up with new ideas, which will help current clients and will lead to new clients in the future. The constant display of thirst for new knowledge will also attract new employees and ultimately lead to a real engineering culture.</description>
    </item>
    
    <item>
      <title>File upload using Dropwizard 0.8.0-rc2</title>
      <link>https://www.remmelt.com/posts/file-upload-using-dropwizard-0-8-0-rc2/</link>
      <pubDate>Sun, 15 Feb 2015 21:27:00 +0000</pubDate>
      
      <guid>https://www.remmelt.com/posts/file-upload-using-dropwizard-0-8-0-rc2/</guid>
      <description>Dropwizard 0.7.1 used com.sun.jersey:jersey-server:jar:1.18.1, where version 0.8.0 comes with org.glassfish.jersey.core:jersey-server:jar:2.15.
Before, when uploading files, it was enough to add the com.sun.jersey.contribs:jersey-multipart dependency like so:
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.sun.jersey.contribs&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jersey-multipart&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.18.3&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; This will not work anymore and throws the somewhat cryptic exception: java.lang.IllegalArgumentException: The MultiPartConfig instance we expected is not present. Have you registered the MultiPartConfigProvider class?
The correct dependency should be
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.glassfish.jersey.media&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;jersey-media-multipart&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.15&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; Update your imports and you’re good to go.</description>
    </item>
    
    <item>
      <title>Start Postgres container and connect with JDBC</title>
      <link>https://www.remmelt.com/posts/start-postgres-container-and-connect-with-jdbc/</link>
      <pubDate>Wed, 14 Jan 2015 22:57:00 +0000</pubDate>
      
      <guid>https://www.remmelt.com/posts/start-postgres-container-and-connect-with-jdbc/</guid>
      <description>Quick example of how to set up a Docker container with Postgresql, using the Spotify Docker Java client.
This supposes a running Docker installation on your local computer, for example using boot2docker.
import com.google.common.base.Strings; import com.google.common.net.HostAndPort; import com.spotify.docker.client.DefaultDockerClient; import com.spotify.docker.client.DockerCertificateException; import com.spotify.docker.client.DockerClient; import com.spotify.docker.client.DockerException; import com.spotify.docker.client.messages.ContainerConfig; import com.spotify.docker.client.messages.ContainerCreation; import com.spotify.docker.client.messages.ContainerInfo; import com.spotify.docker.client.messages.HostConfig; import lombok.extern.slf4j.Slf4j; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; @Slf4j public abstract class PostgresContainerExample { public static Connection setUpDbContainer() throws SQLException { try { // This will only work with the DOCKER_HOST environment variable set 	final DockerClient docker = DefaultDockerClient.</description>
    </item>
    
    <item>
      <title>Docker Swarm setup</title>
      <link>https://www.remmelt.com/posts/docker-swarm-setup/</link>
      <pubDate>Sun, 07 Dec 2014 22:17:00 +0000</pubDate>
      
      <guid>https://www.remmelt.com/posts/docker-swarm-setup/</guid>
      <description>Edit 2015-01-07: Updated article to reflect changes in swarm. Thanks Rael!
Docker Swarm was announced at the first European DockerCon. Swarm is a pluggable cluster manager with a simple scheduler.
It’s currently not super easy to set up, so here is how I did it.
Background The swarm executable discovers hosts by reading entries from the discovery url, discovery-stage.hub.docker.com/v1/clusters/TOKEN. Sample output:
[&amp;#34;128.199.36.196:2375&amp;#34;,&amp;#34;128.199.50.146:2375&amp;#34;,&amp;#34;128.199.32.159:2375&amp;#34;] As you can see, this is just a list of IP/port combinations.</description>
    </item>
    
    <item>
      <title>Service discovering Docker cluster on Digital Ocean</title>
      <link>https://www.remmelt.com/posts/service-discovering-docker-cluster-on-digital-ocean/</link>
      <pubDate>Tue, 14 Oct 2014 22:41:00 +0000</pubDate>
      
      <guid>https://www.remmelt.com/posts/service-discovering-docker-cluster-on-digital-ocean/</guid>
      <description>Jeff Lindsay wrote about “Consul Service Discovery with Docker” and Automatic Docker Service Announcement with Registrator. Using Docker’s event stream is an elegant solution to finding out which containers are running on a particular host. Despite Jeff’s documentation and videos, I couldn’t get Consul to serve up the correct locations of my services.
Here is a description of what I did to get a service discovering cluster to run on Digital Ocean.</description>
    </item>
    
    <item>
      <title>Basic Dropwizard example</title>
      <link>https://www.remmelt.com/posts/basic-dropwizard-example/</link>
      <pubDate>Sun, 14 Sep 2014 21:36:00 +0000</pubDate>
      
      <guid>https://www.remmelt.com/posts/basic-dropwizard-example/</guid>
      <description>I’ve been trying out Dropwizard the last couple of months and it’s been very nice. There are many, many frameworks to choose from in Java country, so it comes as a relief to have a bunch of them chosen for me. Dropwizard glues Jersey, Jetty, Jackson and more together. The end result is a reduction in boiler plate code and complexity. Great for micro services.
I am going to write a couple of posts about Dropwizard.</description>
    </item>
    
  </channel>
</rss>