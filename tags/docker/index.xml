<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on snips</title>
    <link>https://www.remmelt.com/tags/docker/</link>
    <description>Recent content in docker on snips</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 14 Jan 2015 22:57:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.remmelt.com/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Start Postgres container and connect with JDBC</title>
      <link>https://www.remmelt.com/posts/start-postgres-container-and-connect-with-jdbc/</link>
      <pubDate>Wed, 14 Jan 2015 22:57:00 +0000</pubDate>
      
      <guid>https://www.remmelt.com/posts/start-postgres-container-and-connect-with-jdbc/</guid>
      <description>Quick example of how to set up a Docker container with Postgresql, using the Spotify Docker Java client.
This supposes a running Docker installation on your local computer, for example using boot2docker.
import com.google.common.base.Strings; import com.google.common.net.HostAndPort; import com.spotify.docker.client.DefaultDockerClient; import com.spotify.docker.client.DockerCertificateException; import com.spotify.docker.client.DockerClient; import com.spotify.docker.client.DockerException; import com.spotify.docker.client.messages.ContainerConfig; import com.spotify.docker.client.messages.ContainerCreation; import com.spotify.docker.client.messages.ContainerInfo; import com.spotify.docker.client.messages.HostConfig; import lombok.extern.slf4j.Slf4j; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; @Slf4j public abstract class PostgresContainerExample { public static Connection setUpDbContainer() throws SQLException { try { // This will only work with the DOCKER_HOST environment variable set 	final DockerClient docker = DefaultDockerClient.</description>
    </item>
    
    <item>
      <title>Start Postgres container and connect with JDBC</title>
      <link>https://www.remmelt.com/posts/start-postgres-container-and-connect-with-jdbc/</link>
      <pubDate>Wed, 14 Jan 2015 22:57:00 +0000</pubDate>
      
      <guid>https://www.remmelt.com/posts/start-postgres-container-and-connect-with-jdbc/</guid>
      <description>Quick example of how to set up a Docker container with Postgresql, using the Spotify Docker Java client.
This supposes a running Docker installation on your local computer, for example using boot2docker.
import com.google.common.base.Strings; import com.google.common.net.HostAndPort; import com.spotify.docker.client.DefaultDockerClient; import com.spotify.docker.client.DockerCertificateException; import com.spotify.docker.client.DockerClient; import com.spotify.docker.client.DockerException; import com.spotify.docker.client.messages.ContainerConfig; import com.spotify.docker.client.messages.ContainerCreation; import com.spotify.docker.client.messages.ContainerInfo; import com.spotify.docker.client.messages.HostConfig; import lombok.extern.slf4j.Slf4j; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; @Slf4j public abstract class PostgresContainerExample { public static Connection setUpDbContainer() throws SQLException { try { // This will only work with the DOCKER_HOST environment variable set 	final DockerClient docker = DefaultDockerClient.</description>
    </item>
    
    <item>
      <title>Docker Swarm setup</title>
      <link>https://www.remmelt.com/posts/docker-swarm-setup/</link>
      <pubDate>Sun, 07 Dec 2014 22:17:00 +0000</pubDate>
      
      <guid>https://www.remmelt.com/posts/docker-swarm-setup/</guid>
      <description>Edit 2015-01-07: Updated article to reflect changes in swarm. Thanks Rael!
Docker Swarm was announced at the first European DockerCon. Swarm is a pluggable cluster manager with a simple scheduler.
It’s currently not super easy to set up, so here is how I did it.
Background The swarm executable discovers hosts by reading entries from the discovery url, discovery-stage.hub.docker.com/v1/clusters/TOKEN. Sample output:
[&amp;#34;128.199.36.196:2375&amp;#34;,&amp;#34;128.199.50.146:2375&amp;#34;,&amp;#34;128.199.32.159:2375&amp;#34;] As you can see, this is just a list of IP/port combinations.</description>
    </item>
    
    <item>
      <title>Service discovering Docker cluster on Digital Ocean</title>
      <link>https://www.remmelt.com/posts/service-discovering-docker-cluster-on-digital-ocean/</link>
      <pubDate>Tue, 14 Oct 2014 22:41:00 +0000</pubDate>
      
      <guid>https://www.remmelt.com/posts/service-discovering-docker-cluster-on-digital-ocean/</guid>
      <description>Jeff Lindsay wrote about “Consul Service Discovery with Docker” and Automatic Docker Service Announcement with Registrator. Using Docker’s event stream is an elegant solution to finding out which containers are running on a particular host. Despite Jeff’s documentation and videos, I couldn’t get Consul to serve up the correct locations of my services.
Here is a description of what I did to get a service discovering cluster to run on Digital Ocean.</description>
    </item>
    
  </channel>
</rss>