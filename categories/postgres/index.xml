<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Postgres on snips</title>
    <link>http://www.remmelt.com/categories/postgres/</link>
    <description>Recent content in Postgres on snips</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>(c) 2017 - Remmelt Pit</copyright>
    <lastBuildDate>Wed, 14 Jan 2015 22:57:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.remmelt.com/categories/postgres/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Start Postgres container and connect with JDBC</title>
      <link>http://www.remmelt.com/post/start-postgres-container-and-connect-with-jdbc/</link>
      <pubDate>Wed, 14 Jan 2015 22:57:00 +0000</pubDate>
      
      <guid>http://www.remmelt.com/post/start-postgres-container-and-connect-with-jdbc/</guid>
      <description>Quick example of how to set up a Docker container with Postgresql, using the Spotify Docker Java client.
This supposes a running Docker installation on your local computer, for example using boot2docker.
import com.google.common.base.Strings; import com.google.common.net.HostAndPort; import com.spotify.docker.client.DefaultDockerClient; import com.spotify.docker.client.DockerCertificateException; import com.spotify.docker.client.DockerClient; import com.spotify.docker.client.DockerException; import com.spotify.docker.client.messages.ContainerConfig; import com.spotify.docker.client.messages.ContainerCreation; import com.spotify.docker.client.messages.ContainerInfo; import com.spotify.docker.client.messages.HostConfig; import lombok.extern.slf4j.Slf4j; import java.sql.Connection; import java.sql.DriverManager; import java.sql.SQLException; @Slf4j public abstract class PostgresContainerExample { public static Connection setUpDbContainer() throws SQLException { try { // This will only work with the DOCKER_HOST environment variable set final DockerClient docker = DefaultDockerClient.</description>
    </item>
    
  </channel>
</rss>